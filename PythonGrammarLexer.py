# Generated from PythonGrammar.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\"")
        buf.write("\u00bb\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\3\2\3\2\3\3\3\3\3\4\3\4\3")
        buf.write("\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n")
        buf.write("\3\n\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17")
        buf.write("\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34")
        buf.write("\3\34\3\34\3\35\6\35\u0093\n\35\r\35\16\35\u0094\3\36")
        buf.write("\6\36\u0098\n\36\r\36\16\36\u0099\3\36\3\36\7\36\u009e")
        buf.write("\n\36\f\36\16\36\u00a1\13\36\5\36\u00a3\n\36\3\37\3\37")
        buf.write("\7\37\u00a7\n\37\f\37\16\37\u00aa\13\37\3 \6 \u00ad\n")
        buf.write(" \r \16 \u00ae\3 \3 \3!\3!\7!\u00b5\n!\f!\16!\u00b8\13")
        buf.write("!\3!\3!\2\2\"\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13")
        buf.write("\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26")
        buf.write("+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"\3")
        buf.write("\2\t\3\2\f\f\3\2\62;\3\2\63;\3\2c|\6\2\62;C\\aac|\4\2")
        buf.write("\13\f\"\"\4\2\f\f\17\17\2\u00c1\2\3\3\2\2\2\2\5\3\2\2")
        buf.write("\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2")
        buf.write("\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27")
        buf.write("\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3")
        buf.write("\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2")
        buf.write(")\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2")
        buf.write("\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2")
        buf.write(";\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\3C\3\2\2\2")
        buf.write("\5E\3\2\2\2\7G\3\2\2\2\tI\3\2\2\2\13K\3\2\2\2\rM\3\2\2")
        buf.write("\2\17O\3\2\2\2\21R\3\2\2\2\23U\3\2\2\2\25X\3\2\2\2\27")
        buf.write("[\3\2\2\2\31]\3\2\2\2\33_\3\2\2\2\35a\3\2\2\2\37c\3\2")
        buf.write("\2\2!f\3\2\2\2#i\3\2\2\2%l\3\2\2\2\'o\3\2\2\2)r\3\2\2")
        buf.write("\2+t\3\2\2\2-y\3\2\2\2/{\3\2\2\2\61\u0080\3\2\2\2\63\u0086")
        buf.write("\3\2\2\2\65\u008a\3\2\2\2\67\u008d\3\2\2\29\u0092\3\2")
        buf.write("\2\2;\u00a2\3\2\2\2=\u00a4\3\2\2\2?\u00ac\3\2\2\2A\u00b2")
        buf.write("\3\2\2\2CD\7?\2\2D\4\3\2\2\2EF\7,\2\2F\6\3\2\2\2GH\7\61")
        buf.write("\2\2H\b\3\2\2\2IJ\7-\2\2J\n\3\2\2\2KL\7/\2\2L\f\3\2\2")
        buf.write("\2MN\7\'\2\2N\16\3\2\2\2OP\7-\2\2PQ\7?\2\2Q\20\3\2\2\2")
        buf.write("RS\7/\2\2ST\7?\2\2T\22\3\2\2\2UV\7,\2\2VW\7?\2\2W\24\3")
        buf.write("\2\2\2XY\7\61\2\2YZ\7?\2\2Z\26\3\2\2\2[\\\7*\2\2\\\30")
        buf.write("\3\2\2\2]^\7+\2\2^\32\3\2\2\2_`\7>\2\2`\34\3\2\2\2ab\7")
        buf.write("@\2\2b\36\3\2\2\2cd\7>\2\2de\7?\2\2e \3\2\2\2fg\7@\2\2")
        buf.write("gh\7?\2\2h\"\3\2\2\2ij\7?\2\2jk\7?\2\2k$\3\2\2\2lm\7#")
        buf.write("\2\2mn\7?\2\2n&\3\2\2\2op\7k\2\2pq\7h\2\2q(\3\2\2\2rs")
        buf.write("\7<\2\2s*\3\2\2\2tu\7g\2\2uv\7n\2\2vw\7k\2\2wx\7h\2\2")
        buf.write("x,\3\2\2\2yz\7=\2\2z.\3\2\2\2{|\7g\2\2|}\7n\2\2}~\7u\2")
        buf.write("\2~\177\7g\2\2\177\60\3\2\2\2\u0080\u0081\7y\2\2\u0081")
        buf.write("\u0082\7j\2\2\u0082\u0083\7k\2\2\u0083\u0084\7n\2\2\u0084")
        buf.write("\u0085\7g\2\2\u0085\62\3\2\2\2\u0086\u0087\7h\2\2\u0087")
        buf.write("\u0088\7q\2\2\u0088\u0089\7t\2\2\u0089\64\3\2\2\2\u008a")
        buf.write("\u008b\7k\2\2\u008b\u008c\7p\2\2\u008c\66\3\2\2\2\u008d")
        buf.write("\u008e\7f\2\2\u008e\u008f\7g\2\2\u008f\u0090\7h\2\2\u0090")
        buf.write("8\3\2\2\2\u0091\u0093\t\2\2\2\u0092\u0091\3\2\2\2\u0093")
        buf.write("\u0094\3\2\2\2\u0094\u0092\3\2\2\2\u0094\u0095\3\2\2\2")
        buf.write("\u0095:\3\2\2\2\u0096\u0098\t\3\2\2\u0097\u0096\3\2\2")
        buf.write("\2\u0098\u0099\3\2\2\2\u0099\u0097\3\2\2\2\u0099\u009a")
        buf.write("\3\2\2\2\u009a\u00a3\3\2\2\2\u009b\u009f\7/\2\2\u009c")
        buf.write("\u009e\t\4\2\2\u009d\u009c\3\2\2\2\u009e\u00a1\3\2\2\2")
        buf.write("\u009f\u009d\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a3\3")
        buf.write("\2\2\2\u00a1\u009f\3\2\2\2\u00a2\u0097\3\2\2\2\u00a2\u009b")
        buf.write("\3\2\2\2\u00a3<\3\2\2\2\u00a4\u00a8\t\5\2\2\u00a5\u00a7")
        buf.write("\t\6\2\2\u00a6\u00a5\3\2\2\2\u00a7\u00aa\3\2\2\2\u00a8")
        buf.write("\u00a6\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9>\3\2\2\2\u00aa")
        buf.write("\u00a8\3\2\2\2\u00ab\u00ad\t\7\2\2\u00ac\u00ab\3\2\2\2")
        buf.write("\u00ad\u00ae\3\2\2\2\u00ae\u00ac\3\2\2\2\u00ae\u00af\3")
        buf.write("\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00b1\b \2\2\u00b1@\3")
        buf.write("\2\2\2\u00b2\u00b6\7%\2\2\u00b3\u00b5\n\b\2\2\u00b4\u00b3")
        buf.write("\3\2\2\2\u00b5\u00b8\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6")
        buf.write("\u00b7\3\2\2\2\u00b7\u00b9\3\2\2\2\u00b8\u00b6\3\2\2\2")
        buf.write("\u00b9\u00ba\b!\2\2\u00baB\3\2\2\2\n\2\u0094\u0099\u009f")
        buf.write("\u00a2\u00a8\u00ae\u00b6\3\b\2\2")
        return buf.getvalue()


class PythonGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    NEWLINE = 28
    INT = 29
    ID = 30
    WS = 31
    COMMENT = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'*'", "'/'", "'+'", "'-'", "'%'", "'+='", "'-='", "'*='", 
            "'/='", "'('", "')'", "'<'", "'>'", "'<='", "'>='", "'=='", 
            "'!='", "'if'", "':'", "'elif'", "';'", "'else'", "'while'", 
            "'for'", "'in'", "'def'" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "INT", "ID", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "NEWLINE", "INT", "ID", "WS", "COMMENT" ]

    grammarFileName = "PythonGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


